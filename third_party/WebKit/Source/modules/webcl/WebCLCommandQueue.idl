// Copyright (C) 2015 Intel Corporation All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file

typedef unsigned long CLenum;
typedef boolean CLboolean;
typedef unsigned long CLuint;

[
    GarbageCollected,
    ImplementedAs=WebCLCommandQueueAdaptor,
] interface WebCLCommandQueue {
    [RaisesException] void enqueueCopyBuffer(WebCLBuffer srcBuffer,
                                             WebCLBuffer dstBuffer,
                                             CLuint srcOffset,
                                             CLuint dstOffset,
                                             CLuint numBytes,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueCopyBufferRect(WebCLBuffer srcBuffer,
                                                 WebCLBuffer dstBuffer,
                                                 sequence<CLuint> srcOrigin,
                                                 sequence<CLuint> dstOrigin,
                                                 sequence<CLuint> region,
                                                 CLuint srcRowPitch,
                                                 CLuint srcSlicePitch,
                                                 CLuint dstRowPitch,
                                                 CLuint dstSlicePitch,
                                                 optional sequence<WebCLEvent>? eventWaitList,
                                                 optional WebCLEvent? event);

    [RaisesException] void enqueueCopyImage(WebCLImage srcImage,
                                            WebCLImage dstImage,
                                            sequence<CLuint> srcOrigin,
                                            sequence<CLuint> dstOrigin,
                                            sequence<CLuint> region,
                                            optional sequence<WebCLEvent>? eventWaitList,
                                            optional WebCLEvent? event);

    [RaisesException] void enqueueCopyImageToBuffer(WebCLImage srcImage,
                                                    WebCLBuffer dstBuffer,
                                                    sequence<CLuint> srcOrigin,
                                                    sequence<CLuint> srcRegion,
                                                    CLuint dstOffset,
                                                    optional sequence<WebCLEvent>? eventWaitList,
                                                    optional WebCLEvent? event);

    [RaisesException] void enqueueCopyBufferToImage(WebCLBuffer srcBuffer,
                                                    WebCLImage dstImage,
                                                    CLuint srcOffset,
                                                    sequence<CLuint> dstOrigin,
                                                    sequence<CLuint> dstRegion,
                                                    optional sequence<WebCLEvent>? eventWaitList,
                                                    optional WebCLEvent? event);

    [RaisesException] void enqueueReadBuffer(WebCLBuffer buffer,
                                             CLboolean blockingRead,
                                             CLuint bufferOffset,
                                             CLuint numBytes,
                                             ArrayBufferView hostPtr,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueReadBuffer(WebCLBuffer buffer,
                                             CLboolean blockingRead,
                                             CLuint bufferOffset,
                                             CLuint numBytes,
                                             HTMLCanvasElement dstCanvas,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueReadBufferRect(WebCLBuffer buffer,
                                                 CLboolean blockingRead,
                                                 sequence<CLuint> bufferOrigin,
                                                 sequence<CLuint> hostOrigin,
                                                 sequence<CLuint> region,
                                                 CLuint bufferRowPitch,
                                                 CLuint bufferSlicePitch,
                                                 CLuint hostRowPitch,
                                                 CLuint hostSlicePitch,
                                                 ArrayBufferView hostPtr,
                                                 optional sequence<WebCLEvent>? eventWaitList,
                                                 optional WebCLEvent? event);

    [RaisesException] void enqueueReadBufferRect(WebCLBuffer buffer,
                                                 CLboolean blockingRead,
                                                 sequence<CLuint> bufferOrigin,
                                                 sequence<CLuint> dstOrigin,
                                                 sequence<CLuint> region,
                                                 CLuint bufferRowPitch,
                                                 CLuint bufferSlicePitch,
                                                 HTMLCanvasElement dstCanvas,
                                                 optional sequence<WebCLEvent>? eventWaitList,
                                                 optional WebCLEvent? event);

    [RaisesException] void enqueueReadImage(WebCLImage image,
                                            CLboolean blockingRead,
                                            sequence<CLuint> origin,
                                            sequence<CLuint> region,
                                            CLuint hostRowPitch,
                                            ArrayBufferView hostPtr,
                                            optional sequence<WebCLEvent>? eventWaitList,
                                            optional WebCLEvent? event);

    [RaisesException] void enqueueReadImage(WebCLImage image,
                                            CLboolean blockingRead,
                                            sequence<CLuint> origin,
                                            sequence<CLuint> region,
                                            HTMLCanvasElement dstCanvas,
                                            optional sequence<WebCLEvent>? eventWaitList,
                                            optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer bufferId,
                                              CLboolean blockingWrite,
                                              CLuint bufferOffset,
                                              CLuint numBytes,
                                              ArrayBufferView hostPtr,
                                              optional sequence<WebCLEvent>? eventWaitList,
                                              optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer buffer,
                                              CLboolean blockingWrite,
                                              CLuint bufferOffset,
                                              ImageData srcPixels,
                                              optional sequence<WebCLEvent>? eventWaitList,
                                              optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer buffer,
                                              CLboolean blockingWrite,
                                              CLuint bufferOffset,
                                              HTMLCanvasElement srcCanvas,
                                              optional sequence<WebCLEvent>? eventWaitList,
                                              optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer buffer,
                                              CLboolean blockingWrite,
                                              CLuint bufferOffset,
                                              HTMLImageElement srcImage,
                                              optional sequence<WebCLEvent>? eventWaitList,
                                              optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBufferRect(WebCLBuffer buffer,
                                                  CLboolean blockingWrite,
                                                  sequence<CLuint> bufferOrigin,
                                                  sequence<CLuint> hostOrigin,
                                                  sequence<CLuint> region,
                                                  CLuint bufferRowPitch,
                                                  CLuint bufferSlicePitch,
                                                  CLuint hostRowPitch,
                                                  CLuint hostSlicePitch,
                                                  ArrayBufferView hostPtr,
                                                  optional sequence<WebCLEvent>? eventWaitList,
                                                  optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBufferRect(WebCLBuffer buffer,
                                                  CLboolean blockingWrite,
                                                  sequence<CLuint> bufferOrigin,
                                                  sequence<CLuint> srcOrigin,
                                                  sequence<CLuint> region,
                                                  CLuint bufferRowPitch,
                                                  CLuint bufferSlicePitch,
                                                  ImageData srcPixels,
                                                  optional sequence<WebCLEvent>? eventWaitList,
                                                  optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBufferRect(WebCLBuffer buffer,
                                                  CLboolean blockingWrite,
                                                  sequence<CLuint> bufferOrigin,
                                                  sequence<CLuint> srcOrigin,
                                                  sequence<CLuint> region,
                                                  CLuint bufferRowPitch,
                                                  CLuint bufferSlicePitch,
                                                  HTMLCanvasElement srcCanvas,
                                                  optional sequence<WebCLEvent>? eventWaitList,
                                                  optional WebCLEvent? event);

    [RaisesException] void enqueueWriteBufferRect(WebCLBuffer buffer,
                                                  CLboolean blockingWrite,
                                                  sequence<CLuint> bufferOrigin,
                                                  sequence<CLuint> srcOrigin,
                                                  sequence<CLuint> region,
                                                  CLuint bufferRowPitch,
                                                  CLuint bufferSlicePitch,
                                                  HTMLImageElement srcImage,
                                                  optional sequence<WebCLEvent>? eventWaitList,
                                                  optional WebCLEvent? event);

    // TODO(jiajiehu): The binding generator complains about non-distinct arguments while handling
    // the following overloaded methods, so they are implemented through custom binding. Will revisit
    // here when it's supported.
    [Custom, RaisesException] void enqueueWriteImage(WebCLImage image,
                                                     CLboolean blockingWrite,
                                                     sequence<CLuint> origin,
                                                     sequence<CLuint> region,
                                                     CLuint hostRowPitch,
                                                     ArrayBufferView hostPtr,
                                                     optional sequence<WebCLEvent>? eventWaitList,
                                                     optional WebCLEvent? event);

    /*
    [RaisesException] void enqueueWriteImage(WebCLImage image,
                                             CLboolean blockingWrite,
                                             sequence<CLuint> origin,
                                             sequence<CLuint> region,
                                             ImageData srcPixels,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueWriteImage(WebCLImage image,
                                             CLboolean blockingWrite,
                                             sequence<CLuint> origin,
                                             sequence<CLuint> region,
                                             HTMLCanvasElement srcCanvas,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueWriteImage(WebCLImage image,
                                             CLboolean blockingWrite,
                                             sequence<CLuint> origin,
                                             sequence<CLuint> region,
                                             HTMLImageElement srcImage,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);

    [RaisesException] void enqueueWriteImage(WebCLImage image,
                                             CLboolean blockingWrite,
                                             HTMLVideoElement srcVideo,
                                             optional sequence<WebCLEvent>? eventWaitList,
                                             optional WebCLEvent? event);
    */

    [RaisesException] void enqueueNDRangeKernel(WebCLKernel kernel,
                                                CLuint workDim,
                                                sequence<CLuint>? offsets,
                                                sequence<CLuint> globalWorkSize,
                                                optional sequence<CLuint>? localWorkSize,
                                                optional sequence<WebCLEvent>? eventWaitList,
                                                optional WebCLEvent? event);

    [RaisesException] void enqueueMarker(WebCLEvent event);
    [RaisesException] void enqueueBarrier();
    [RaisesException] void enqueueWaitForEvents(sequence<WebCLEvent> events);
    [RaisesException] void finish(optional WebCLCallback whenFinished);
    [RaisesException] void flush() ;
    [CallWith=ScriptState, RaisesException] any getInfo(CLenum queuenfo);
    void release();
};
